import { ResourceBlock } from "@/utils/types/resource";
import { defaultSave } from "@/utils/defaultSave";
import { syncNodeWithBackend } from "@/utils/terraformSync";
import {
  useTerraformResourceStore,
  ResourceType,
} from "@/store/useTerraformResourceStore";
import { rdsData } from "@/config/awsNodes/rds.config";
import { IngressRuleData } from "@/config/resources/sgIngress.config";
import { EgressRuleData } from "@/config/resources/sgEgress.config";

// To add new Resources based on the type passed as parameter
export function handleNewResource(labelType: ResourceType) {
  const newLabel = `${labelType}-${Date.now()}`;
  const id = useTerraformResourceStore
    .getState()
    .addResource(labelType, { Name: newLabel });

  return [newLabel, id];
}

const defaultRdsPorts: Record<string, number> = {
  mysql: 3306,
  postgres: 5432,
  mariadb: 3306,
  "oracle-se2": 1521,
  "sqlserver-ex": 1433,
};

export const rdsSave = async (node: ResourceBlock) => {
  const dataNode = node.data as rdsData;
  if (dataNode.AutoGenerateSG === "yes" && !dataNode.AutoGeneratedSGCreated) {
    // create the security group
    const [sgName, id] = handleNewResource("securitygroup");

    // determine RDS engine port
    const engine: string = dataNode.Engine || "mysql"; // fallback
    const port = defaultRdsPorts[engine] || 3306;

    //  default ingress/egress rules
    const defaultIngress: IngressRuleData[] = [
      {
        Protocol: "tcp",
        FromPort: port,
        ToPort: port,
        CidrIPv4: "0.0.0.0/0",
      },
    ];

    const defaultEgress: EgressRuleData[] = [
      {
        Protocol: "-1",
        FromPort: 0,
        ToPort: 0,
        CidrIPv4: "0.0.0.0/0",
      },
    ];

    //  sync SG to backend with rules && also with resource
    useTerraformResourceStore.getState().updateResource(id, {
      IngressRules: defaultIngress,
      EgressRules: defaultEgress,
    });

    await syncNodeWithBackend({
      id,
      type: "securitygroup",
      data: {
        Name: sgName,
        IngressRules: defaultIngress,
        EgressRules: defaultEgress,
      },
    });

    // attach SG to RDS
    if (!Array.isArray(dataNode.SecurityGroups)) {
      dataNode.SecurityGroups = [];
    }
    dataNode.SecurityGroups.push(sgName);
    dataNode.AutoGeneratedSGCreated = sgName;
  }

  return defaultSave(node);
};
